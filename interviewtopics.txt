Vector class in java:

1. Vector is slow because it is synchronized i.e in multithreading environment, it will hold the other threads in runnable or non-runnable state until current thread releases the lock of object. 
2. Vector is a legacy class. 
		LEGACY meaning - Every version of java did not include Collections framework. Instead it defined several classes and one interface to store objects.When collection came these classes reengineered to support the collection interfaces. These old classes are known as legacy classes.
3. Vector increments 100% means double the array size if total number of element exceeds than its capacity.
4. Vector uses Enumeration interface to traverse the elements. But it can use Iterator also.

ArrayList class in java:

1. ArrayList is fast because it is non-synchronized.
2. ArrayList is not a legacy class and is introduced in JDK 1.2.
3. ArrayList increments 50% of current array size if number of element exceeds from its capacity.
4. ArrayList uses Iterator interface to traverse the elements.
5. ArrayList can contain duplicate elements.
6. In ArrayList, manipulation is slow because a lot of shifting needs to be occured if any element is removed from the arraylist.
7. ArrayList extends AbstractList class and implement List interface.
8. ArrayList is better for storing and accessing data.
9. ArrayList internally uses dynamic array to store the elements.

LinkedList class in java:

1. LinkedList extends AbstractList class and implement List and Deque interface.
2. LinkedList can contain duplicate elements.
3. LinkedList is non-synchronized.
4. In LinkedList, manipulation is faster because no shifting needs to be done.
5. LinkedList can be used as list, stack, queue.
6. LinkedList is better for manipulating data.
7. LinkedList internally uses doubly linked list to store elements.

****************************************************************************************************************************************************************

Java Collection supports two types of Iterator:
1. Fail-Fast iterator:
	a) throws ConcurrentModification Exception.
	b) no cloning of object.
	c) no memoryoverhead.
	d) Ex: HashMap, ArrayList, Vector, HashSet.
2. Fail-Safe iterator:
	a) doesnot throw ConcurrentModification Exception.
	b) cloning of object is done.
	c) memoryoverhead occured.
	d) CopyOnWriteArrayList, ConcurrentHashMap, CopyOnWriteArraySet
	e) Introduced in Java 1.5
	
* If you have used Collection like ArrayList then you know that when you iterate over them, no other thread should modify the collection. If Iterator detects any structural change after iteration has begun e.g adding or removing a new element then it throws ConcurrentModification Exception,  this is known as fail-fast behavior and these iterators are called fail-fast iterator because they fail as soon as they detect any modification.

* Fail-Safe iterator uses a view of original collection for doing iteration and that's why it doesnot throw ConcurrentModification Exception even when original collection was modified after iteration has begun.

* Fail-Fast iterator traverse over original collection class while Fail-Safe iterator traverse over a copy or view of original collection. That's why they don't detect any change on original collection classes and this also means that you could operate with stale value.

Read more: http://www.java67.com/2015/06/what-is-fail-safe-and-fail-fast-iterator-in-java.html#ixzz4Jjn26KKt

****************************************************************************************************************************************************************

Error & Exception : -

Both Error and Exception class retain inside java.lang package and is a sub-classes of java.lang.Throwable class.

Error : java.lang.Error represents the error which are mainly caused by environment in which application is running. Recovering from error is not possible. The only solution is to terminate the execution.

Exception : java.lang.Exception are maily caused by the application itself. Recovering from exception is possible by using try/catch block or throwing exception back to caller.
