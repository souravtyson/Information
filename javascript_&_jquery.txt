Functions are basics unit of action in jQuery. The main entry point of most jQuery application is a block of code that looks like this : 

			$(document).ready(function(){
				Do something
			});
			
a) $(document) is a jQuery object. The $() is actually in disguise; it turns the document into a jQuery object.
b) .ready() is a type of function; you can think of it as sort of a helper that runs the code inside parentheses as soon as the HTML document is ready.
c) function(){} is a action that .ready() will perform  as soon as the HTML document is loaded.(In the above example the Do something placeholder is where those actions would go).

*************************************************************************************************************************************************

jQuery :

Dynamically adding elements to our HTML page is a powerful tool :-

Let us modify not only the formatting, but the actual structure of our websites in response to a user's actions. We can insert our newly created elements using a few jQuery actions.

a)	.append() inserts the specified element as the last child of the target element.
	.prepend() inserts the specified element as the first child of the target element.
	Example : 
		$(".info").append("<p>Stuff!</p>");
		$(".info").prepend("<p>Stuff!</p>");
	
		Above code will add a paragraph containing the text "Stuff!" inside all divs of class .info. ".append()" will make the paragraph the last child of each div; ".prepend()" will make the paragraph the first child of each div.
		
		".appendTo()" does the same as ".append()", but it just reverses the order of "what to add" and "where to add it".
		So the code : $('<p>Stuff!</p>').appendTo('.info');
		will have the same effect as the ".append()" code above ".prependTo()" has a similar relationship to .prepend().
		
b)	Insert an element in the DOM with the help of ".before()" &	".after()" functions. The syntax looks like this : 
			$('target').after('<tag>To add</tag>');
	
		Here "target" is the element after which you want to add something and the bit between "<tag>" is the HTML element you want to add. You can add "<h1>" "<div>" or any other valid HTML you like.
				
		Example :
		$(document).ready(function(){
			var $paragraph = $("p");
			$("div").after($paragraph);
			$("div").after($("p"));
		});
		
		1. we can select an element using $("p") and assign it to a variable.
		2. we can move the position in the DOM by using the variable in our after() statement.
		This does not copy the element from one location to another, it moves the original element effectively saving yo from having to delete the original.

c)  Remove elements using jQuery functions like ".empty()" & ".remove()". These functions help us delete content from pages.
		
		".empty()" deletes an element's content and its descendants. 
		If you ".empty()" an 'ol' tag, you'll also remove all its 'li' tag and their text.
		
		".remove()", not only deletes an element's content, but deletes the element itself.
		
d)  Adding & Removing classes can also be possible through jQuery. We can fine-tune our jQuery superpowers to alter classes, CSS, and even the contents of out HTML elements.
		
		jQuery includes two functions : 1) ".addClass()" 2) ".removeClass()", that can be used to add or remove a class from an element.
		Example : 
			You have a highlighted class that you want to apply to an element when clicked.
			Syntax : 
					$('selector').addClass('className')
					$('selector').removeClass('className')
			where 'selector' is the HTML element you want and 'className' is the class name you want to add or remove.
			Note : You aren't selecting anything, you are modifying your element.This means that you do not need # or . befor your class.

e)  Toggling of classes can also be done using jQuery. 
	Example : If we want jQuery to automatically check to see whether our '#text' is highlighted, so that when we click on it, it adds the class if it isn't there & removes it if it is.
	jQuery includes a '.toggleClass' function that does exactly this. If the element it's called on has the class it receives as an input, '.toggleClass' removes that class; if the target element doesn't have that class, '.toggleClass' adds it.

f) jQuery has specific .height() & .width() functions that can be used to change the heights & 		widths of HTML elements
	Example : 			$("div").height("100px");
						$("div").width("50px");
	the above code would give style to all <div>'s tag on the page a height of 100 pixels & a width of 50 pixels.
	
	jQuery also includes a general-purpose .css() function() that takes two inputs: the first is the CSS element to alter and second is the value to set it to.
	Example : 			$("div").css("background-color","#008800");
	the above could would give all <div>s tag on the page a green background color. You can modify any element's CSS attributes this way.
	
g) We can update the contents of our HTML elements - that is, the bit between the opening and closing tags using the .html() & .val() functions.
	

 
