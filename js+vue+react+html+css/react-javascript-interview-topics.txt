
IIFE - Immediately invoked function expression

const funct = () => {
	 {
   		let l = "a"			
      var v = "v"
   }
   
   console.log(v)     // v										v,a
   console.log(l)     // l is not defined
}


funct()


(function funct() {
	 {
   		let l = "a"			
      var v = "v"
   }
   
    console.log(v) // 
  	console.log(l) 
})()


async axios.get().then(response => )
async axios.get().then()

promise.all().then();


redux
promise
closure

object.assign
object and array - nested object
shallow copy vs deep copy

nested object value 

typeof bar === "object" - what difficulty how to overcome Array.isArray()

typeof undefined			
typeof null

console.log(false == "0")  //true
console.log(false === "0") // false


array = []
typeof array == "object"   // true
typeof array === "object"  // true

implementation of deepcopy algorithm 


virtual dom vs original dom - reconciliation
useContext



const funct = () => {

	{
		let l = "l"
		var v = "v"
	}
	
	console.log(v)  // v
	console.log(l)  // l is undefined  // works
}

funct()


*********************************************************************************************************************

const c = (function funct(){
	{
		let l = "l"
		var v = "v"
	}
	
	console.log(v)  // v
	console.log(l)
	

})()


(function() {
    console.log(1);     
    setTimeout(function(){console.log(2)}, 1000);
    setTimeout(function(){console.log(3)}, 0);
    setTimeout(function(){console.log(5)}, Infinity);
    console.log(4);
})();

let arr = [
{id :1, mark: 40},
{id :2, mark: 50},
{id :3, mark: 60}
];

//let arr2 = []
//arr.forEach((item) => {
	//console.log(item)
//  item.mark = item.mark + 10
//  arr2.push(item)
//})
//console.log(arr2)

//let x = arr.filter((item) => 	item.mark >= 50) 

//console.log(x)

var x = "sourav"
let y = ""
for (i =x.length-1;i>=0;i--){
	y = y+x[i]
}
console.log(y)

********************************************

virtual dom
version used
lifecycle method of react
react fragments
useEffect hooks in functional component
higher order components
redux
es6 features
event debouncing
closure

(function() {
    console.log(1);     
    setTimeout(function(){console.log(2)}, 1000);
    setTimeout(function(){console.log(3)}, 0);
    setTimeout(function(){console.log(5)}, Infinity);
    console.log(4);
})();

*********************************************

feature of react
lifecycle method
componentdidupdate 
pure component
higher order component
how can i do updation of props
react router
use of arrow funtion 
redux
map vs filter
prototyped inheritence
call vs bind vs apply
closure
object prototyped
currying
event bubbling
design pattern
event loop
concurrency in js


let arr = [
{id :1, mark: 40},
{id :2, mark: 50},
{id :3, mark: 60}
];

//let arr2 = []
//arr.forEach((item) => {
	//console.log(item)
//  item.mark = item.mark + 10
//  arr2.push(item)
//})
//console.log(arr2)

//let x = arr.filter((item) => 	item.mark >= 50) 

//console.log(x)

var x = "sourav"
let y = ""
for (i =x.length-1;i>=0;i--){
	y = y+x[i]
}
console.log(y)

css/html
why !doctype

**************************************************


1. version 16.8
2. hooks
3. context api
4. const shape = {

  radius: 10,

  diameter() {

    return this.radius * 2;

  },

  perimeter: () => 2 * Math.PI * this.radius,

};

console.log(shape.diameter()); 
console.log(shape.perimeter()); 

5. closure
6. generator function
7. css mixins
8. redux

************************************************

how many prototype objects are in the chain for the following array



<!--Given a string print the total number of palindromic substrings having length > 1.  [ * should not use library function ]

Example

Input:

	abaa
  
  

Output:

	2
  -->
  
  
*****************************************************


let str = 'first';

str.prototype.c = () => {

	}

var x = 12
const c = '23'
let y = 13


const profile={"name": "sourav", "phone": "8990887"}
profile.name="saket"



call
apply
bind


function x (first,second) {
	
}

x.call(profile,23,3)
x.apply(profile,[23,3])
x.bind(profile)

x()

state = {
	x: 0
}

this.setState({
	x: 2
})


const age=[3,5,11,9,4]


const updated = age.map((a) => {
	a + 3
})


function secondHighestNumber(){
	if(age.length > 1){
	var highest = age[0];
	for(let m=1;m<age.length;m++){
		if(age[m-1] > highest){
			highest=age[m-1]
		}
	}
	}
	
}

******************************************

function mult(x){
	return function(y){
		return function(z){
			return x * y * z
		}
	}
}


mult(3)(4)(2)
mult(3,4,2)


********************************************

function sayHi() {
  console.log(name);
  console.log(age);
  var name = 'Lydia';
  let age = 21;
}

sayHi();


*****************************************

const obj = { a: 1, b: 2 }


for (var i = 0; i < 3; i++) {
  setTimeout(() => console.log(i), 1);
}

for (let i = 0; i < 3; i++) {
  setTimeout(() => console.log(i), 1);
}


********************************************************

const shape = {
  radius: 10,
  diameter() {
    return this.radius * 2;
  },
  perimeter: () => 2 * Math.PI * this.radius,
};


********************************************************

let arr1 = [{
id : 1,
name : 'suresh'
},{
id : 2,
name : 'Siva'
}]

let arr2 = [{
id : 1,
location : 'india'
}]


let modified = arr1.map(details => {
		var filtered = arr2.filter(obj => details.id === obj.id)
    let final = {
    	...details
      }
    if(filtered.length){
    	final['location'] = filtered[0].location
    }
    return final
})


let output = [{
id : 1,
name : 'suresh',
location : 'india'
},{
id : 2,
name : 'Siva'
}]

********************************************************


let a = [1,2,3,4,5,6]
let b = a.map ( (item) => { return item / 2 == 0 }) [false,false,false,false,false,false]
let c = a.filter ( item => item / 2 == 0 ) []


********************************************************

let str ='Welcome back'

const inArr = [...str]
inArr.map((char, position) => { if(char === 'e') return position;} )

str.split('').reverse().join('')



********************************************************


const StateComponent = () => {

	const [local, setLoacl] = useState("");
  
  return (
  	<div>
    	<p>{local}</p>
    </div>
  )

}

const action = {
	type: "UPDATE",
  payload
}

const reducer = (state= initialState, action) => {
	switch(action.type)
  	case 'UPDATE': return state + 1
    case default : return state
}


***************************************************************

HDFC	

1. const myMoney = {
quarters: 4,
dimes: 10,
nickels: 20,
pennies: 100
}

for (const coin of myMoney){
console.log(`${coin}: ${myMoney[coin]}`);
}

2. const myArr = [1,2,3];
const arrTwo = myArr.splice(0,4).slice(0,2);
arrTwo[0] = 9;
console.log(arrTwo);


3. const person1 = {
name: 'Willie',
address: {
city: 'Austin',
state: 'Texas'
}
};

const person2 = {...person1};

person2.name = 'Waylon';
person2.address.city = 'Fort Worth';

console.log(person1.address.city);


let a=10 ;
{
var a=50 ;
}
console.log(a);

const arr = [1,2,3,1,4,3]

const uniq = []

arr.forEach(x => {
	if(!uniq.includes(x)){
	  uniq.push(x)
	}
})

console.log(uniq)

*********************************************************

how do you implement caching in frontend application
why do we need defer script
default position value of any html element
flex vs grid
em vs rem
what are css preprocessors
how do we achieve responsiveness
what is webpack
do you perform unit testing. WHta library do you use. Why do we jest
how to achieve inheritance in function javascript
how does javascript event delegration works.
what are generator function
what is difference between controlled and uncontrolled component
why do we need useId
lifecycle method used by useEffect
lifecycle methods in error boundries
how do we connect our redux store to our component, what hooks are available for that
how do we perform lazy loading in react
what is suspense
what is React js
Lifecycle methods vs Hooks
what is unidirectional data  flow n react js
componentdidupdate vs componentdidmount
use useEffect in diffent ways
what is react memo - give ex for it - benefits of it
what is HOC , explain - any use case
mounting vs rendering
how to optimize react application. any example(pagination, infinite scroll, caching)(keep one example ready if they ask you can give answer)
how to pass data from child to parent - callback, 
what are different ways to call the apis
what is react context api
concept of provider and consumer
features of react latest version 
what is redux & how it works
what are middlewares, what hapens if they are not there
redux thunk vs saga
what are promises in JS
what is callback hell in js, 
async/await
Explain some features of ES6
diff between var, let, const
shallow vs deep copy
map vs filter
prototype and how it works (application of it - inheritance)
arrow function and advantages of arrow funtion
when we use bind vs call & apply
spread vs rest parameter
get second last element for the array (array size may change)
type coercion question
element vs component
what are pure components
refs in react
forwardref in react
what is virtual dom 
interceptors, give example of interceptors
react fiber
briefly explain life cycle methods of react
in which case you will use HOC
how to manage nested routes in terms of role based routing(restrict some page based on roles of user)

********************************************************************
Victoria secret

const myPromise = Promise.resolve(Promise.resolve('Promise'));

function funcOne() {
  setTimeout(() => console.log('Timeout 1!'), 0);
  myPromise.then(res => res).then(res => console.log(`${res} 1!`));
  console.log('Last line 1!');
}

async function funcTwo() {
  const res = await myPromise;
  console.log(`${res} 2!`)
  setTimeout(() => console.log('Timeout 2!'), 0);
  console.log('Last line 2!');
}

funcOne();
funcTwo();

**************************************************************
Victoria secret

const myPromise = () => Promise.resolve('I have resolved!');

function firstFunction() {
  myPromise().then(res => console.log(res));
  console.log('second');
}

async function secondFunction() {
  console.log(await myPromise());
  console.log('second');
}

firstFunction();
secondFunction();

***********************************************************
Victoria secret

console.log(
  "Wrtie the Logic to get the Items from Invenotry object where inStock is true for the items that is present in selectedByUser array"
);

const inventory = {
  items: [
    {
      key: "fruits",
      options: [
        {
          label: "apple",
          inStock: "true"
        },
        {
          label: "kiwi",
          inStock: "false"
        }
      ]
    },
    {
      key: "veg",
      options: [
        {
          label: "potato",
          inStock: "false"
        },
        {
          label: "tomato",
          inStock: "true"
        }
      ]
    }
  ]
};

const selectedByUser = [
  {
    key: "fruits",
    label: "apple"
  },
  {
    key: "veg",
    label: "potato"
  },
  {
    key: "veg",
    label: "tomato"
  },
  {
    key: "fruits",
    label: "orange"
  }
];
****************************************************

import React, {useState} from 'react';

function Parent() {

  const [ counter, setCounter ] = useState(0);
  const [name, setName] = useState("");
  const [arr, setArr] = useState([])
  const handleClick = () => {
    // setCounter(counter + 1);
    var x = [...arr]
    x.push(name)
    setArr(name)
    console.log(arr)
    setName("")
  }
  
  const setValue = (e) => {
    setName(e.target.value)
  }
  
  return (
    <div>
    
      <input value={name} onChange={setValue} />
      <Child title={'Hello Child'}/>
      <button onClick={handleClick}>Click Me!!</button>
    
    </div>
  )
}

function Child(props) {
  const { title } = props;
  console.log("child component rendering")
  return (
    <div>{title}</div>
  )
}

export default Parent;



child component should not be render 
