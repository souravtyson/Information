JAVASCRIPT : 

		IIFE
		promise
		axios
		fetch
		closure
		object.assign
		object & array - nested object
		shallow copy vs deep copy
		
		nested object value 
		
		typeof bar === "object" - what difficulty how to overcome Array.isArray()
		
		typeof undefined			
		typeof null
		
		console.log(false == "0")  //true
		console.log(false === "0") // false
		
		array = []
		typeof array == "object"   // true
		typeof array === "object"  // true
		
		implementation of deepcopy algorithm 		
		es6 features
		event debouncing
		what is the use of arrow function
		arrow function vs anonymous function
		map vs filter in javascript
		prototyped inheritance
		call vs bind vs aPPLY
		object prototyped
		currying
		event bubbling
		design pattern
		event loop
		concurrency in js
		generator function
		destructuring
		spread
		falsy value in javascript

REACT:

feature of react
virtual dom vs original dom - reconciliation
useContext
version used
lifecycle method of react
react fragments
useEffect hooks in functional component
higher order components
componentdidupdate
pure component
how can i do updation of props
react rounter
redux
hooks
why hooks was introduced in react
context api
usememo vs useCallback
usestate, useeffect - how many times can we declare in a component
jest - unit test case
best way to bootstrap the application - creat-react-app ? or something else

how many times state render 

this.setState({ x: 1 });
this.setState({ x: 2 });
this.setState({ x: 3 });

..

...

.....

this.setState({ x: 10 });

have you worked on redux? can you explain saga

*************************************

explain redux scenario : 
for these two components 

list of product - component
shopping cart - component

*************************************

presentation vs container component with respect to redux

*************************************

pure component
higher order components
unit testing in react
what http framework you used
serviceworker
web worker
arrow function
RWD - responsive web design 
	 techniques of responsive web design

web socket

write component to display the text on button click  on ui. take the input from user written in text box. 
add css style to span element - 100 px and 100px
when to use span and paragraph tag
diff between inline block vs inline
async vs defer
performance improvement for javascript - webpack, lazy loading
debouncing
memoization
serviceworker and server components
hoc


@@@@@@@@				<ButtonUpdate attri={}>
@@@@@@@@				
@@@@@@@@				import React, {useState} from 'react';
@@@@@@@@				
@@@@@@@@				const ButtonUpdate = () =>{
@@@@@@@@					const [city,setCity] = useState('Bangalore')
@@@@@@@@					
@@@@@@@@					const func = () => {
@@@@@@@@						setCity('Delhi');
@@@@@@@@					}
@@@@@@@@					
@@@@@@@@					useEffect(()=>{
@@@@@@@@						setCity(attri)
@@@@@@@@					},[])
@@@@@@@@					
@@@@@@@@					return(
@@@@@@@@						<h1>{city}</h1>
@@@@@@@@						<button onClick={func}>Change City</button>
@@@@@@@@					)
@@@@@@@@				}
@@@@@@@@				
@@@@@@@@				export default ButtonUpdate;



@@@@@@@@				import React from 'react'
@@@@@@@@				
@@@@@@@@				
@@@@@@@@				const App = () => {
@@@@@@@@				
@@@@@@@@					const [text, setText] = useState('')
@@@@@@@@					const [display,setDisplay] = useState(false)
@@@@@@@@					
@@@@@@@@					const chnageText = ()=>{
@@@@@@@@							setText(text);
@@@@@@@@					}	
@@@@@@@@					
@@@@@@@@					const clickme = () => {
@@@@@@@@						setDisplay(true)
@@@@@@@@					}
@@@@@@@@				
@@@@@@@@					return (
@@@@@@@@						<input type="text" value={text} onChange={chnageText}>
@@@@@@@@						<button onClick={clickme}> Click Me</button>
@@@@@@@@						<h4>{display ? text :  ''}</h4>
@@@@@@@@						<span style={{width: 100%; height: 100%}}>Hi my name is sourav</span>
@@@@@@@@					)
@@@@@@@@				}
@@@@@@@@				
@@@@@@@@				export default App;


*************************   CSS/HTML  ***************************

css mixins
why !doctype
absolute and relative
box model in css
css selectors
box model - sequence

************************* code  *********************

1. 
		function createZ( n ) {   // if n === 5
			*****
			---*-
			--*--
			-*---
			***** 
		}

2. 
		Write a program to reverse the string by word Ex:
		let str = "Hello how are you?";
		// Output should be "you? are how Hello"

3.
		console.log(1);
		setTimeout(function(){console.log(2)}, 1000);
		setTimeout(function(){console.log(3)}, 0);
		console.log(4);

4. 
		let arr = [2,3,3,4,2]
		frequency of each element

5. 
		const age=[3,5,11,9,4]
		find second highest number
		

		tried
							function secondHighestNumber(){
							if(age.length > 1){
							var highest = age[0];
							for(let m=1;m<age.length;m++){
								if(age[m-1] > highest){
									highest=age[m-1]
								}
							}
							}
	
						}


6. 
		const shape = {
			radius: 10,
			diameter() {
				return this.radius * 2;
			},
			perimeter: () => 2 * Math.PI * this.radius,
		};
		
		console.log(shape.diameter()); 
		console.log(shape.perimeter()); 
		
7.     
		
		(function() {
			console.log(1);     
			setTimeout(function(){console.log(2)}, 1000);
			setTimeout(function(){console.log(3)}, 0);
			setTimeout(function(){console.log(5)}, Infinity);
			console.log(4);
		})();
		
8. 		reverse of a string
		
		var x = "sourav"
		let y = ""
		for (i =x.length-1;i>=0;i--){
			y = y+x[i]
		}
		console.log(y)
		
9. 

		let arr = [
		{id :1, mark: 40},
		{id :2, mark: 50},
		{id :3, mark: 60}
		];
		
		increment ll marks by 10
		
				let arr2 = []
				arr.forEach((item) => {
					console.log(item)
				item.mark = item.mark + 10
				arr2.push(item)
				})
				console.log(arr2)
		
		filter marks
		
				let x = arr.filter((item) => item.mark >= 50) 
				console.log(x)
				
				
10. 

			/*
			* Find number of occurances of character in a word
			* Eg. Input => time line
				Output => t: 1, i: 2, m: 1, e: 1, l: 1, n:1 
			*/
			
			let str = 'time lIne123$_';
			let obj = {}
			function occurence(){
			for(let x=0;x<str.length;x++){
				if(str[x] in obj){
				obj[str[x]]++;
				}else{
				obj[str[x]] = 1;
				}
			}
			}
			occurence();
			
			
			let m = ''
			for(let x in obj){
			m += x+': '+obj[x]+', '
			}
			console.log(m)
			
11. 

		sum(a)(b)(c)
		implement this function
		
12. 

		find duplicates : 
		
		let a = [2,3,1,2,4]
		let b = [2,5,7,1]
		
		
		let uniqa = [...new Set(a)]
		let uniqb = [...new Set(b)]
		
		uniqa.filter((elem)=>{
			return uniqb.contains(elem)
		})
		
		without inbuilt function : 
		
		let dupl = []
		let isAdded = {}
		
		for(let i=0;i<a.length;i++){
			for(let x=0;x<b.length;x++){
				if(a[i]===b[x]){
					if(!isAdded[a[i]]){
						isAdded[a[i]] = true;
						dupl.push(a[i])
					}
				}
			}
		}
		
13.   

		const originArr = [2,3,4,1,2,4,3,9,11];

		//2,4,3		
		
		function getDuplicates(arr){
		//const uniq = [...new Set(arr)]
		let obj = {};
		const dupl = []
		for(let x=0;x<arr.length;x++){
					if( arr[x] in obj ){
					obj[arr[x]]++;
				dupl.push(arr[x])
			}else{
					obj[arr[x]] = 1
			}  	
			
		}
			console.log(obj);
			return dupl;//[2,3,4];
		}
		
		console.log(getDuplicates(originArr));
		
14. 

		Function sleep (t){
//Complete the logic here

return new promise(resolve => setTimeout({},t);
}


Async Function toBeSleep () {
console.log(“hello”);
Await sleep(1000);
console.log(“Bye”);
}

//output
Hello
Wait 1 sec…...
Bye


15. 

// Define the following function appropriately.
function greet(name) {
  return function (){
    console.log('Hello '+name)
  }
}

var say = greet('Bruce');
// Calling the say() function should log "Hello Bruce"
say();

15.  
		call vs apply


var x = 'sourav'

x.call('methodname',2,3,4)

x.apply('methodname',[2,3,4])

try{

}catch(error){
	
}finally{
}


var empty = []
empty.length = 0


puzzle - 5 lit jar
		 3 lit jar
		 create 4 lit jar


		5-3 =2
		3-2 =1
		3+1 =4


[1,4,2,5] => find the missing number (using n(n+1)/n)

16.
 
 add(2,1)
 add(2)(1)
 
 implement common method
 
17.

	find intersection of two arrays 

18. 

	useData = {
		name: 'sourav',
		address: {
			street: {
				town: madhubani,
				country: India
			}
		}
	}

    o/p = {user_name: 'sourav', user_address_street_town: 'madhubani', user_address_street_country: 'India' }