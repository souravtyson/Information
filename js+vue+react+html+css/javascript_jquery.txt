Functions are basics unit of action in jQuery. The main entry point of most jQuery application is a block of code that looks like this : 

			$(document).ready(function(){
				Do something
			});
			
a) $(document) is a jQuery object. The $() is actually in disguise; it turns the document into a jQuery object.
b) .ready() is a type of function; you can think of it as sort of a helper that runs the code inside parentheses as soon as the HTML document is ready.
c) function(){} is a action that .ready() will perform  as soon as the HTML document is loaded.(In the above example the Do something placeholder is where those actions would go).

*************************************************************************************************************************************************

jQuery :

Dynamically adding elements to our HTML page is a powerful tool :-

Let us modify not only the formatting, but the actual structure of our websites in response to a user's actions. We can insert our newly created elements using a few jQuery actions.

a)	.append() inserts the specified element as the last child of the target element.
	.prepend() inserts the specified element as the first child of the target element.
	Example : 
		$(".info").append("<p>Stuff!</p>");
		$(".info").prepend("<p>Stuff!</p>");
	
		Above code will add a paragraph containing the text "Stuff!" inside all divs of class .info. ".append()" will make the paragraph the last child of each div; ".prepend()" will make the paragraph the first child of each div.
		
		".appendTo()" does the same as ".append()", but it just reverses the order of "what to add" and "where to add it".
		So the code : $('<p>Stuff!</p>').appendTo('.info');
		will have the same effect as the ".append()" code above ".prependTo()" has a similar relationship to .prepend().
		
b)	Insert an element in the DOM with the help of ".before()" &	".after()" functions. The syntax looks like this : 
			$('target').after('<tag>To add</tag>');
	
		Here "target" is the element after which you want to add something and the bit between "<tag>" is the HTML element you want to add. You can add "<h1>" "<div>" or any other valid HTML you like.
				
		Example :
		$(document).ready(function(){
			var $paragraph = $("p");
			$("div").after($paragraph);
			$("div").after($("p"));
		});
		
		1. we can select an element using $("p") and assign it to a variable.
		2. we can move the position in the DOM by using the variable in our after() statement.
		This does not copy the element from one location to another, it moves the original element effectively saving you from having to delete the original.

c)  Remove elements using jQuery functions like ".empty()" & ".remove()". These functions help us delete content from pages.
		
		".empty()" deletes an element's content and its descendants. 
		If you ".empty()" an 'ol' tag, you'll also remove all its 'li' tag and their text.
		
		".remove()", not only deletes an element's content, but deletes the element itself.
		
d)  Adding & Removing classes can also be possible through jQuery. We can fine-tune our jQuery superpowers to alter classes, CSS, and even the contents of out HTML elements.
		
		jQuery includes two functions : 1) ".addClass()" 2) ".removeClass()", that can be used to add or remove a class from an element.
		Example : 
			You have a highlighted class that you want to apply to an element when clicked.
			Syntax : 
					$('selector').addClass('className')
					$('selector').removeClass('className')
			where 'selector' is the HTML element you want and 'className' is the class name you want to add or remove.
			Note : You aren't selecting anything, you are modifying your element.This means that you do not need # or . befor your class.

e)  Toggling of classes can also be done using jQuery. 
	Example : If we want jQuery to automatically check to see whether our '#text' is highlighted, so that when we click on it, it adds the class if it isn't there & removes it if it is.
	jQuery includes a '.toggleClass' function that does exactly this. If the element it's called on has the class it receives as an input, '.toggleClass' removes that class; if the target element doesn't have that class, '.toggleClass' adds it.

f) jQuery has specific .height() & .width() functions that can be used to change the heights & 		widths of HTML elements
	Example : 			$("div").height("100px");
						$("div").width("50px");
	the above code would give style to all <div>'s tag on the page a height of 100 pixels & a width of 50 pixels.
	
	jQuery also includes a general-purpose .css() function() that takes two inputs: the first is the CSS element to alter and second is the value to set it to.
	Example : 			$("div").css("background-color","#008800");
	the above could would give all <div>s tag on the page a green background color. You can modify any element's CSS attributes this way.
	
g) We can update the contents of our HTML elements - that is, the bit between the opening and closing tags using the .html() & .val() functions.
	

***********************************************************************************************************************

Diffrence between == and === operator in javascript

== it compares only value in variable
=== it compares value and data type
var x = 10
console.log(x == "10")  //   true
console.log(x === "10")   // false - because typeof x == number and typeof "10" string

typeof - it tells what kind of data type the variable is

***********************************************************************************************************************
concept of hoisting : 

in javascript variable can be declared after it has been used

FOR EXAMPLE : 
in the below code you can see i have initialized x with value 5 and later at the end of the code i declared x. 

														x = 5; // Assign 5 to x
														elem = document.getElementById("demo"); // Find an element
														elem.innerHTML = x;                     // Display x in the element
														var x; // Declare x
													
													output - 5
so javascript interpretes the above code as below one

														var x; // Declare x
														x = 5; // Assign 5 to x
														elem = document.getElementById("demo"); // Find an element
														elem.innerHTML = x;                     // Display x in the element

													output - 5

Hoisting is JavaScript's default behavior of moving all declarations to the top of the current scope (to the top of the current script or the current function)
so in the above code you can see that var x is moved to top of the javascript file and then it runs.
There are few scenarios where this hoisting feature doesnot work like : 

1. Variables declared with let or const are not hoisted.
2. JavaScript only hoists declarations, not initializations.
3. hoisting of function declarations is possible but hoisting of function expression is not.

FOR EXAMPLE : 

														var x = 5; // Initialize x
														elem = document.getElementById("demo"); // Find an element
														elem.innerHTML = x + " " + y;           // Display x and y
														var y = 7; // Initialize y

													output - y undefined

so javascript interpretes the above code as below one

														var x = 5; // Initialize x
														var y;     // Declare y
														elem = document.getElementById("demo"); // Find an element
														elem.innerHTML = x + " " + y;           // Display x and y
														y = 7;    // Assign 7 to y														

													output - y undefined
													
Because of hoisting, y has been declared before it is used, but because initializations are not hoisted, the value of y is undefined.


FOR EXAMPLE : 
								Normal function --
														helloWorld();  // prints 'Hello World!' to the console
														function helloWorld(){
															console.log('Hello World!');
														}
														
													output - Hello World
								Function expression - 					
														helloWorld();  // TypeError: helloWorld is not a function
														
														var helloWorld = function(){
															console.log('Hello World!');
														}
													
													output - helloWorld is not a function

As JavaScript only hoist declarations, not initializations(assignments), so the helloWorld will be treated as a variable, not as a function.
So javascript in strict mode does not allow  variables to be used if they are not declared


************************************************************************************************************************
 
 fetch api example for post method:
 
fetch("https://jsonplaceholder.typicode.com/users",{
  method:"post",
  body: JSON.stringify({
    name: "sourav",
    username: "sousu"
  }),
  headers: {
    "Content-Type": "application/json"
  }
}).then(response => {
  response.json().then((data) => {
    console.log(data)
  });
});


***********************************************************************************************************************


const is another keyword provided in ES6, with the help of which we can create variable.
const keyword is more like let keyword the only difference is : whenever you create const variable you 
must initialize it with some value otherwise, it will throw error. creating the constant variable means you cannot reassgin 
value to it. but you can, in case of array or object, update the pointer
it is only accessible to the scope in which it is defined

let is another keyword which is supported in ES6 version.
this is basically used to set the variable scope to some block or function scope
so basically if you declare a variable in some block of code it is accessible to that scope only
reassigning the value to the variable is possible if you are doing it within the scope


Hoisting - In hoisting variable declaration and function declaration are processed before any code are executed
so declaring a variable or fucntion anywhere in the code is equivalent to declaring it at the top. This also means
that a variable & functions can appear to be used before they are declared, this behaviour  
is called hoiting



to create a variable in javascript you can use var, let, const. All these keywords are avialable for es6 version.
If you go to es5 version you will get only var as keyword to create variable


var keyword explanation with example
if variable created using var you can change variable value. if the scope of var varibale is global then it is accessible to
any part of the code. consider scenario below where myFirstName is globally created and same is accessed in the function with the assigned value
but if you create a variable with same name in function scope it is not accessible outside the function. for the same scenario whatever changes 
you do within function scope will be effective in that scope only.



**********************************************************************************************************************************

let and const 

let declared variable is not hoisted whereas var declared variable is hoisted
variable declared using let and const are blocked scoped
all const declarations must be initialized and once initialized, you cannot assign a new value

					let 							const
					
				let name;						const name = 'sourav'
				name = 'sourav'
				
				let name = 'sourav'				const name = 'sourav'    |
				name = 'suman'						name = 'suman'    	 |    not possible in case of const
				
				

*********************************************************************************************************************************


shorthand object assignment 

const name = 'sourav'
const age = 28


old school way - 

const detail = {
	name: name,
	age: age
}


new school way - (shorthand way)

const detail = {
	name,
	age
}


*********************************************************************************************************************************


destructuring assignment : 

	1. Object  		
	
			// old ways
			
			const name = {
				first : "sourav",
				second: "suman"
			}
			
			const first = name.first
			const second = name.second
			
			
			// new ways
			
			const name = {
				first : "sourav",
				second : "suman"
			}
			
			const {first,second} = name
			const {first:f, second:s} = name
	
	2. Arrays 
	
			// old ways
			const name = ["sourav","suman"]
			const first = name[0]
			const second = name[1]
			
			// new way
			const name = ["sourav","suman"]
			const [first,second] = name

*********************************************************************************************************************************

spread operator : 

const arr = [1,2,4,5]
const arrcopy = [...arr]

const obj = {name: "sourav suman", age: 28}
const objcopy = {...obj}

array concat : 
let arr1 = [2,4,1,5]
let arr2 = 	[2,1,1,9]

arr1 = [...arr1, ...arr2]


object merge : 

let obj1 = {x:2,o:"sourav"}
let obj2 = {i:0,g:"soav"}

obj1 = {...obj1,...obj2}


*********************************************************************************************************************************

Optional chaining : 

var person = {
	name: "bruce Wayne",
	details: {
		age: 28,
		address: {
			city: "Gotham"
		}
	}
}

//old ways
console.log(person.details && person.details.address && person.details.address.city)
// new ways
console.log(person?.details?.address?.city)
	
var person = {
	name: "bruce Wayne",
	details: {
		age: 28,
		address: {
			city: "Gotham"
		}
	}, hobbies : [
		{
			name: "Crime fighting"
		}
	]
}	

old ways
console.log(person.hobbies && person.hobbies.length && person.hobbies[0] && person.hobbies[0].name)
new ways
console.log(person?.hobbies?.[0]?.name)


*********************************************************************************************************************************

Nullish Coalescing Operator : 

	Logical OR operator

		const name = "sourav"
		const userName = name || "guest"
		console.log(userName) // op - sourav
		
		const name = null
		const userName = name || "guest"
		console.log(username)  // op - guest
		
		const name = ''
		const userName = name || "guest"
		console.log(userName)  // op - guest  expected op - ''
		
		const count = 0
		const views = count || "N/A"
		console.log(views)  // op - N/A  expected op - 0
		
	Nullish Coalescing Operator
	
		const name = ''
		const userName = name ?? "guest"
		console.log(userName)  // op - '' 
		
		
		const count = 0
		const views = count ?? "N/A"
		console.log(views)  // op - 0
		
		
		
*********************************************************************************************************************************

Template Literals
Ternary Operator
Arrow Functions
Import and Export 


*********************************************************************************************************************************

Lifecycle methods in React :

Mounting   -  constructor, static getDerivedStatefromProps, render, 
			  componentDidMount(runs after component is mounted and rendered to the DOM) : use for asynchronous api call
Updating  -  componentDidUpdate(called right after updating happens) : if you set state in this lifecycle method, then try to do it based on condition. As it will go for infinite loop
Unmounting - componentWillUnmount( invoked just before the component is removed from DOM ) : use to remove event listeners, clear intervals(all needed cleanup ) 
Error Handling

React HOOKS : 

useEffect - for running it during mounting or unmounting use empty dependency array
			for running when update happened then use dependency in array or don't pass array at all


*********************************************************************************************************************************

example of useEffect - class component vs functional component 

import React, {Component} from 'react'

class ClassCounterOne extends Component{

	constructor(){
		super()
		this.state = {
			count: 0
		}
	}

	componentDidMount(){
		document.title = `Clicked ${this.state.count} times`
	}
	
	componentDidUpdate(prevProps,prevState){
		document.title = `Clicked ${this.state.count} times`
	}

	render(){
		return(
			<div>
				<button onClick={() => this.setState({count: this.state.count+1})}>`You click ${count}`</button>
			</div>
		)
	}

}



import React, {useState, useEffect} from 'react'

function HookCounterOne(){
	const [count,setCount]=useState(0)
	
	useEffect(() => {
		document.title = `You clicked ${count} times`
	})

	return (
		<div>
			<button onClick={() => setCount(count + 1)}>`clicked ${count} time`</button>
		</div>
	)
}

*********************************************************************************************************************************

run useEffect conditionally : 

import React, {Component} from 'react'

class ClassCounterTwo extends Component{
	
	constructor(props){
		super(props)
		this.state = {
			count : 0,
			name : ''
		}
	}
	
	componentDidMount(){
		document.title = `You clicked ${count} times`
	}
	
	componentDidUpdate(prevProps, prevState){
		if(prevState.count != this.state.count){
			console.log("Updating document title")
			document.title = `You clicked ${this.state.count} times`
		}
	}
	
	render(){
		return(
			<div>
				<input type="text" value={this.state.name} onChange={(e) => this.setState({name: e.target.value	})}/>
				<button onClick={() => this.setState({count: this.state.count +1})}>`Click ${this.state.count} times`</button>
			</div>
		)
	}
	
}

export default ClassCounterTwo


import React , {useState,useEffect} from 'react'

function HookCounterTwo(){
	
	const [count, setCount] = useState(0)
	
	const [name, setName] = useState('')
	
	useEffect(() => {
		console.log("useEffect - Updating document title")
		document.title = `You clicked ${count} times`
	}, [count])
	
	return (
		<div>
			<input type="text" value{name} onChange={(e) => setName(e.target.value)}/>
			<button onClick={() => setCount(count + 1)}>`Clicked ${count} times`</button>
		</div>
	)
}


***************************************************************************************************

Why <!DOCTYPE html>  =>  

Doctype stands for Document Type Declaration. It informs the web browser about the type and version of HTML used 
in building the web document. This helps the browser to handle and load it properly.